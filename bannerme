#!/usr/bin/env python3

import subprocess
import re
import sys
import glob
from rich.console import Console
from rich.table import Table

def run_nmap_scan_for_banners(ip):
    try:
        result = subprocess.run(
            ['nmap', '--min-rate=250', '--max-rate=500', '-n', '-Pn', '-A', ip],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
        )
        if result.returncode != 0:
            return []
        output = result.stdout
        port_pattern = r"(\d+/tcp)\s+open\s+(\S+)\s+(.*)"
        return re.findall(port_pattern, output)
    except Exception:
        return []

def parse_nmap_file(file_path):
    with open(file_path, 'r') as file:
        nmap_data = file.read()
    host_pattern = r"Nmap scan report for (\S+)"
    return re.findall(host_pattern, nmap_data)

def get_banner_from_nmap(files):
    seen = set()
    ordered_hosts = []
    for file in files:
        for host in parse_nmap_file(file):
            if host not in seen:
                seen.add(host)
                ordered_hosts.append(host)

    console = Console()
    for host_ip in ordered_hosts:
        console.print(f"\n[bold green]{host_ip}")
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Port", style="dim")
        table.add_column("Service")
        table.add_column("Banner")

        ports = run_nmap_scan_for_banners(host_ip)
        if ports:
            for port, service, banner in ports:
                port_number = port.split('/')[0]
                table.add_row(port_number, service, banner)
            console.print(table)
        else:
            console.print(f"[bold red]No open ports found for {host_ip}[/]")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        # keep natural order from the shell instead of sorted glob
        import os
        files = sorted(glob.glob("*.nmap"), key=os.path.getmtime)
    else:
        files = sys.argv[1:]
    if not files:
        print("No .nmap files found.")
    else:
        get_banner_from_nmap(files)
